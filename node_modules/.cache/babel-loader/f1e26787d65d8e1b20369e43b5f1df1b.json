{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadkhalil/Desktop/D/programing/FrontEnd Development/React/11-reactRouter/reactRouter2/src/pages/AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/useHttp\";\nimport { getAllQuotes } from \"../api/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: \"q1\",\n  author: \"Max\",\n  text: \"Learning React is fun!\"\n}, {\n  id: \"q2\",\n  author: \"Maximilian\",\n  text: \"Learning React is great!\"\n}];\n\nconst AllQuotes = () => {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centerd\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centerd focused\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_QUOTES\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AllQuotes, \"TX91E3Ry29pOjGA3Az87eReX9Xs=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["/Users/ahmadkhalil/Desktop/D/programing/FrontEnd Development/React/11-reactRouter/reactRouter2/src/pages/AllQuotes.js"],"names":["useEffect","QuoteList","useHttp","getAllQuotes","LoadingSpinner","NoQuotesFound","DUMMY_QUOTES","id","author","text","AllQuotes","sendRequest","status","data","loadedQuotes","error","length"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADmB,EAEnB;AAAEF,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,YAApB;AAAkCC,EAAAA,IAAI,EAAE;AAAxC,CAFmB,CAArB;;AAKA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,IAAI,EAAEC,YAA7B;AAA2CC,IAAAA;AAA3C,MAAqDb,OAAO,CAChEC,YADgE,EAEhE,IAFgE,CAAlE;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIH,MAAM,KAAK,WAAX,KAA2B,CAACE,YAAD,IAAiBA,YAAY,CAACE,MAAb,KAAwB,CAApE,CAAJ,EAA4E;AAC1E,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzBD;;GAAMI,S;UACuDR,O;;;KADvDQ,S;AA2BN,eAAeA,SAAf","sourcesContent":["import { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/useHttp\";\nimport { getAllQuotes } from \"../api/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst DUMMY_QUOTES = [\n  { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n  { id: \"q2\", author: \"Maximilian\", text: \"Learning React is great!\" },\n];\n\nconst AllQuotes = () => {\n  const { sendRequest, status, data: loadedQuotes, error } = useHttp(\n    getAllQuotes,\n    true\n  );\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className='centerd'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centerd focused'>{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n  return <QuoteList quotes={DUMMY_QUOTES} />;\n};\n\nexport default AllQuotes;\n"]},"metadata":{},"sourceType":"module"}